import * as React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { IVulnerability } from "@/types/vulnerability";
import useVulnerability from "@/hooks/useVulnerability";
import { useRouter } from "next/router";

const formSchema = z.object({
  name: z.string().min(2, {
    message: "Name must be at least 2 characters.",
  }),
  description: z.string({
    required_error: "Please select a country.",
  }),
  severity: z.enum(["Critical", "High", "Medium", "Low"], {
    required_error: "Please select a severity.",
  }),
  cvss: z.string().min(1, {
    message: "Company name is required.",
  }),
  cve: z.string().min(1, {
    message: "Company name is required.",
  }),

  status: z.enum(["open", "close"], {
    required_error: "Please select a status.",
  }),
});

interface IVulnerabilityForm {
  vulnerability?: IVulnerability;
  setOpenModal?: (openModal: boolean) => void;
}
export default function VulnerabilityForm(props: IVulnerabilityForm) {
  const { vulnerability, setOpenModal } = props;
  const { AddNewVulnerability, DeleteVulnerability } = useVulnerability();
  const router = useRouter();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: vulnerability ? vulnerability.name : "",
      description: vulnerability ? vulnerability.description : "",
      severity: vulnerability ? vulnerability.severity : undefined,
      cvss: vulnerability ? vulnerability.cvss : "",
      cve: vulnerability ? vulnerability.cve : "",
      status: vulnerability ? vulnerability.status : undefined,
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    console.log(values);
    AddNewVulnerability(values).then((res) => {
      if (res.status === 201 && setOpenModal) setOpenModal(false);
    });
  }

  const handleDelete = (id: number | undefined) => {
    if (id) {
      DeleteVulnerability(id).then((res) => {
        if (res.status === 204) {
          router.back();
        }
        console.log(res);
      });
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name</FormLabel>
                <FormControl>
                  <Input placeholder="Enter your name" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Input placeholder="Enter your description" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="severity"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Severity</FormLabel>
                <Select onValueChange={field.onChange} value={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a severity" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="Critical">Critical</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="cvss"
            render={({ field }) => (
              <FormItem>
                <FormLabel>CVSS</FormLabel>
                <FormControl>
                  <Input type="text" placeholder="Enter CVSS" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="cve"
            render={({ field }) => (
              <FormItem>
                <FormLabel>CVE</FormLabel>
                <FormControl>
                  <Input placeholder="Enter CVE" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Status</FormLabel>
                <Select onValueChange={field.onChange} value={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a status" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="open">Open</SelectItem>
                    <SelectItem value="close">Close</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <Button type="submit">Submit</Button>
        {vulnerability && (
          <Button
            type="button"
            variant="destructive"
            onClick={() => handleDelete(vulnerability.id)}
          >
            Delete
          </Button>
        )}
      </form>
    </Form>
  );
}
