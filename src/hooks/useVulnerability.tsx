import API from "@/service/middleware";
import useSWR from "swr";
import { IVulnerability, IVulnerabilityResponse } from "@/types/vulnerability";
import { AxiosResponse } from "axios";
import { useState } from "react";
import { useRouter } from "next/router";

interface IUseVulnerability {
  AddNewVulnerability: (body: IVulnerability | any) => Promise<AxiosResponse>;
  UpdateNewVulnerabilities: (
    body: IVulnerability | any
  ) => Promise<AxiosResponse>;

  AddNewVulnerabilities: (
    body: IVulnerability[] | any
  ) => Promise<AxiosResponse>;
  vulnerabilities: IVulnerabilityResponse;
  DeleteVulnerability: (id: number) => Promise<AxiosResponse>;
  setVulnerabilityParams: (params: string) => void;
  vulnerabilityIsLoading: boolean;
}

const useVulnerability = (): IUseVulnerability => {
  const [vulnerabilityParams, setVulnerabilityParams] = useState<string>("");
  const router = useRouter();

  const {
    data: vulnerabilities,
    isLoading: vulnerabilityIsLoading,
    mutate: GetVulnerabilities,
  } = useSWR("/api/vulnerabilities" + vulnerabilityParams);

  const AddNewVulnerability = async (body: IVulnerability) => {
    try {
      const response = await API.post("/api/vulnerability", body);
      setVulnerabilityParams("?" + router.asPath.split("?")[1]);

      await GetVulnerabilities();
      return response;
    } catch (error: any) {
      console.log(error);
      return error.response;
    }
  };

  const AddNewVulnerabilities = async (body: IVulnerability) => {
    try {
      const response = await API.post("/api/vulnerabilities", body);
      setVulnerabilityParams("?" + router.asPath.split("?")[1]);

      await GetVulnerabilities();
      return response;
    } catch (error: any) {
      console.log(error);
      return error.response;
    }
  };

  const UpdateNewVulnerabilities = async (body: IVulnerability) => {
    try {
      const response = await API.put(
        "/api/vulnerability" + "/" + body.id,
        body
      );
      await GetVulnerabilities();
      return response;
    } catch (error: any) {
      console.log(error);
      return error.response;
    }
  };

  const DeleteVulnerability = async (id: number | undefined) => {
    try {
      const response = await API.delete(`/api/vulnerability/${id}`);
      await GetVulnerabilities();
      return response;
    } catch (error: any) {
      console.log(error);
      return error.response;
    }
  };

  return {
    AddNewVulnerability,
    AddNewVulnerabilities,
    UpdateNewVulnerabilities,
    DeleteVulnerability,
    vulnerabilities,
    setVulnerabilityParams,
    vulnerabilityIsLoading,
  };
};

export default useVulnerability;
